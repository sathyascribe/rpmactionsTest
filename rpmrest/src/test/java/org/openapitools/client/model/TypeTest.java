/*
 * RPM Mobile
 * RPM Mobile
 *
 * The version of the OpenAPI document: Phase 1
 * Contact: karthikchiru@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Assembly;
import org.openapitools.client.model.ConstructorInfo;
import org.openapitools.client.model.CustomAttributeData;
import org.openapitools.client.model.GenericParameterAttributes;
import org.openapitools.client.model.MemberTypes;
import org.openapitools.client.model.MethodBase;
import org.openapitools.client.model.Module;
import org.openapitools.client.model.RuntimeTypeHandle;
import org.openapitools.client.model.StructLayoutAttribute;
import org.openapitools.client.model.TypeAttributes;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for Type
 */
public class TypeTest {
    private final Type model = new Type();

    /**
     * Model tests for Type
     */
    @Test
    public void testType() {
        // TODO: test Type
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'customAttributes'
     */
    @Test
    public void customAttributesTest() {
        // TODO: test customAttributes
    }

    /**
     * Test the property 'isCollectible'
     */
    @Test
    public void isCollectibleTest() {
        // TODO: test isCollectible
    }

    /**
     * Test the property 'metadataToken'
     */
    @Test
    public void metadataTokenTest() {
        // TODO: test metadataToken
    }

    /**
     * Test the property 'isInterface'
     */
    @Test
    public void isInterfaceTest() {
        // TODO: test isInterface
    }

    /**
     * Test the property 'memberType'
     */
    @Test
    public void memberTypeTest() {
        // TODO: test memberType
    }

    /**
     * Test the property 'namespace'
     */
    @Test
    public void namespaceTest() {
        // TODO: test namespace
    }

    /**
     * Test the property 'assemblyQualifiedName'
     */
    @Test
    public void assemblyQualifiedNameTest() {
        // TODO: test assemblyQualifiedName
    }

    /**
     * Test the property 'fullName'
     */
    @Test
    public void fullNameTest() {
        // TODO: test fullName
    }

    /**
     * Test the property 'assembly'
     */
    @Test
    public void assemblyTest() {
        // TODO: test assembly
    }

    /**
     * Test the property 'module'
     */
    @Test
    public void moduleTest() {
        // TODO: test module
    }

    /**
     * Test the property 'isNested'
     */
    @Test
    public void isNestedTest() {
        // TODO: test isNested
    }

    /**
     * Test the property 'declaringType'
     */
    @Test
    public void declaringTypeTest() {
        // TODO: test declaringType
    }

    /**
     * Test the property 'declaringMethod'
     */
    @Test
    public void declaringMethodTest() {
        // TODO: test declaringMethod
    }

    /**
     * Test the property 'reflectedType'
     */
    @Test
    public void reflectedTypeTest() {
        // TODO: test reflectedType
    }

    /**
     * Test the property 'underlyingSystemType'
     */
    @Test
    public void underlyingSystemTypeTest() {
        // TODO: test underlyingSystemType
    }

    /**
     * Test the property 'isTypeDefinition'
     */
    @Test
    public void isTypeDefinitionTest() {
        // TODO: test isTypeDefinition
    }

    /**
     * Test the property 'isArray'
     */
    @Test
    public void isArrayTest() {
        // TODO: test isArray
    }

    /**
     * Test the property 'isByRef'
     */
    @Test
    public void isByRefTest() {
        // TODO: test isByRef
    }

    /**
     * Test the property 'isPointer'
     */
    @Test
    public void isPointerTest() {
        // TODO: test isPointer
    }

    /**
     * Test the property 'isConstructedGenericType'
     */
    @Test
    public void isConstructedGenericTypeTest() {
        // TODO: test isConstructedGenericType
    }

    /**
     * Test the property 'isGenericParameter'
     */
    @Test
    public void isGenericParameterTest() {
        // TODO: test isGenericParameter
    }

    /**
     * Test the property 'isGenericTypeParameter'
     */
    @Test
    public void isGenericTypeParameterTest() {
        // TODO: test isGenericTypeParameter
    }

    /**
     * Test the property 'isGenericMethodParameter'
     */
    @Test
    public void isGenericMethodParameterTest() {
        // TODO: test isGenericMethodParameter
    }

    /**
     * Test the property 'isGenericType'
     */
    @Test
    public void isGenericTypeTest() {
        // TODO: test isGenericType
    }

    /**
     * Test the property 'isGenericTypeDefinition'
     */
    @Test
    public void isGenericTypeDefinitionTest() {
        // TODO: test isGenericTypeDefinition
    }

    /**
     * Test the property 'isSZArray'
     */
    @Test
    public void isSZArrayTest() {
        // TODO: test isSZArray
    }

    /**
     * Test the property 'isVariableBoundArray'
     */
    @Test
    public void isVariableBoundArrayTest() {
        // TODO: test isVariableBoundArray
    }

    /**
     * Test the property 'isByRefLike'
     */
    @Test
    public void isByRefLikeTest() {
        // TODO: test isByRefLike
    }

    /**
     * Test the property 'hasElementType'
     */
    @Test
    public void hasElementTypeTest() {
        // TODO: test hasElementType
    }

    /**
     * Test the property 'genericTypeArguments'
     */
    @Test
    public void genericTypeArgumentsTest() {
        // TODO: test genericTypeArguments
    }

    /**
     * Test the property 'genericParameterPosition'
     */
    @Test
    public void genericParameterPositionTest() {
        // TODO: test genericParameterPosition
    }

    /**
     * Test the property 'genericParameterAttributes'
     */
    @Test
    public void genericParameterAttributesTest() {
        // TODO: test genericParameterAttributes
    }

    /**
     * Test the property 'attributes'
     */
    @Test
    public void attributesTest() {
        // TODO: test attributes
    }

    /**
     * Test the property 'isAbstract'
     */
    @Test
    public void isAbstractTest() {
        // TODO: test isAbstract
    }

    /**
     * Test the property 'isImport'
     */
    @Test
    public void isImportTest() {
        // TODO: test isImport
    }

    /**
     * Test the property 'isSealed'
     */
    @Test
    public void isSealedTest() {
        // TODO: test isSealed
    }

    /**
     * Test the property 'isSpecialName'
     */
    @Test
    public void isSpecialNameTest() {
        // TODO: test isSpecialName
    }

    /**
     * Test the property 'isClass'
     */
    @Test
    public void isClassTest() {
        // TODO: test isClass
    }

    /**
     * Test the property 'isNestedAssembly'
     */
    @Test
    public void isNestedAssemblyTest() {
        // TODO: test isNestedAssembly
    }

    /**
     * Test the property 'isNestedFamANDAssem'
     */
    @Test
    public void isNestedFamANDAssemTest() {
        // TODO: test isNestedFamANDAssem
    }

    /**
     * Test the property 'isNestedFamily'
     */
    @Test
    public void isNestedFamilyTest() {
        // TODO: test isNestedFamily
    }

    /**
     * Test the property 'isNestedFamORAssem'
     */
    @Test
    public void isNestedFamORAssemTest() {
        // TODO: test isNestedFamORAssem
    }

    /**
     * Test the property 'isNestedPrivate'
     */
    @Test
    public void isNestedPrivateTest() {
        // TODO: test isNestedPrivate
    }

    /**
     * Test the property 'isNestedPublic'
     */
    @Test
    public void isNestedPublicTest() {
        // TODO: test isNestedPublic
    }

    /**
     * Test the property 'isNotPublic'
     */
    @Test
    public void isNotPublicTest() {
        // TODO: test isNotPublic
    }

    /**
     * Test the property 'isPublic'
     */
    @Test
    public void isPublicTest() {
        // TODO: test isPublic
    }

    /**
     * Test the property 'isAutoLayout'
     */
    @Test
    public void isAutoLayoutTest() {
        // TODO: test isAutoLayout
    }

    /**
     * Test the property 'isExplicitLayout'
     */
    @Test
    public void isExplicitLayoutTest() {
        // TODO: test isExplicitLayout
    }

    /**
     * Test the property 'isLayoutSequential'
     */
    @Test
    public void isLayoutSequentialTest() {
        // TODO: test isLayoutSequential
    }

    /**
     * Test the property 'isAnsiClass'
     */
    @Test
    public void isAnsiClassTest() {
        // TODO: test isAnsiClass
    }

    /**
     * Test the property 'isAutoClass'
     */
    @Test
    public void isAutoClassTest() {
        // TODO: test isAutoClass
    }

    /**
     * Test the property 'isUnicodeClass'
     */
    @Test
    public void isUnicodeClassTest() {
        // TODO: test isUnicodeClass
    }

    /**
     * Test the property 'isCOMObject'
     */
    @Test
    public void isCOMObjectTest() {
        // TODO: test isCOMObject
    }

    /**
     * Test the property 'isContextful'
     */
    @Test
    public void isContextfulTest() {
        // TODO: test isContextful
    }

    /**
     * Test the property 'isEnum'
     */
    @Test
    public void isEnumTest() {
        // TODO: test isEnum
    }

    /**
     * Test the property 'isMarshalByRef'
     */
    @Test
    public void isMarshalByRefTest() {
        // TODO: test isMarshalByRef
    }

    /**
     * Test the property 'isPrimitive'
     */
    @Test
    public void isPrimitiveTest() {
        // TODO: test isPrimitive
    }

    /**
     * Test the property 'isValueType'
     */
    @Test
    public void isValueTypeTest() {
        // TODO: test isValueType
    }

    /**
     * Test the property 'isSignatureType'
     */
    @Test
    public void isSignatureTypeTest() {
        // TODO: test isSignatureType
    }

    /**
     * Test the property 'isSecurityCritical'
     */
    @Test
    public void isSecurityCriticalTest() {
        // TODO: test isSecurityCritical
    }

    /**
     * Test the property 'isSecuritySafeCritical'
     */
    @Test
    public void isSecuritySafeCriticalTest() {
        // TODO: test isSecuritySafeCritical
    }

    /**
     * Test the property 'isSecurityTransparent'
     */
    @Test
    public void isSecurityTransparentTest() {
        // TODO: test isSecurityTransparent
    }

    /**
     * Test the property 'structLayoutAttribute'
     */
    @Test
    public void structLayoutAttributeTest() {
        // TODO: test structLayoutAttribute
    }

    /**
     * Test the property 'typeInitializer'
     */
    @Test
    public void typeInitializerTest() {
        // TODO: test typeInitializer
    }

    /**
     * Test the property 'typeHandle'
     */
    @Test
    public void typeHandleTest() {
        // TODO: test typeHandle
    }

    /**
     * Test the property 'guid'
     */
    @Test
    public void guidTest() {
        // TODO: test guid
    }

    /**
     * Test the property 'baseType'
     */
    @Test
    public void baseTypeTest() {
        // TODO: test baseType
    }

    /**
     * Test the property 'isSerializable'
     */
    @Test
    public void isSerializableTest() {
        // TODO: test isSerializable
    }

    /**
     * Test the property 'containsGenericParameters'
     */
    @Test
    public void containsGenericParametersTest() {
        // TODO: test containsGenericParameters
    }

    /**
     * Test the property 'isVisible'
     */
    @Test
    public void isVisibleTest() {
        // TODO: test isVisible
    }

}
