/*
 * RPM Mobile
 * RPM Mobile
 *
 * The version of the OpenAPI document: Phase 1
 * Contact: karthikchiru@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets TypeAttributes
 */
@JsonAdapter(TypeAttributes.Adapter.class)
public enum TypeAttributes {
  
  NUMBER_0(0),
  
  NUMBER_1(1),
  
  NUMBER_2(2),
  
  NUMBER_3(3),
  
  NUMBER_4(4),
  
  NUMBER_5(5),
  
  NUMBER_6(6),
  
  NUMBER_7(7),
  
  NUMBER_8(8),
  
  NUMBER_16(16),
  
  NUMBER_24(24),
  
  NUMBER_32(32),
  
  NUMBER_128(128),
  
  NUMBER_256(256),
  
  NUMBER_1024(1024),
  
  NUMBER_2048(2048),
  
  NUMBER_4096(4096),
  
  NUMBER_8192(8192),
  
  NUMBER_16384(16384),
  
  NUMBER_65536(65536),
  
  NUMBER_131072(131072),
  
  NUMBER_196608(196608),
  
  NUMBER_262144(262144),
  
  NUMBER_264192(264192),
  
  NUMBER_1048576(1048576),
  
  NUMBER_12582912(12582912);

  private Integer value;

  TypeAttributes(Integer value) {
    this.value = value;
  }

  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TypeAttributes fromValue(Integer value) {
    for (TypeAttributes b : TypeAttributes.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TypeAttributes> {
    @Override
    public void write(final JsonWriter jsonWriter, final TypeAttributes enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TypeAttributes read(final JsonReader jsonReader) throws IOException {
      Integer value = jsonReader.nextInt();
      return TypeAttributes.fromValue(value);
    }
  }
}

